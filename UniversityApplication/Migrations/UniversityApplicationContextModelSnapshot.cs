// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using UniversityApplication.Data;

#nullable disable

namespace UniversityApplication.Migrations
{
    [DbContext(typeof(UniversityApplicationContext))]
    partial class UniversityApplicationContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "6.0.4")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder, 1L, 1);

            modelBuilder.Entity("UniversityApplication.Models.Course", b =>
                {
                    b.Property<int>("courseId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("courseId"), 1L, 1);

                    b.Property<int>("credits")
                        .HasColumnType("int");

                    b.Property<string>("educationLevel")
                        .HasMaxLength(25)
                        .HasColumnType("nvarchar(25)");

                    b.Property<int?>("firstTeacherId")
                        .HasColumnType("int");

                    b.Property<string>("programme")
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<int?>("secondTeacherId")
                        .HasColumnType("int");

                    b.Property<int>("semester")
                        .HasColumnType("int");

                    b.Property<string>("title")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.HasKey("courseId");

                    b.HasIndex("firstTeacherId");

                    b.HasIndex("secondTeacherId");

                    b.ToTable("Course");
                });

            modelBuilder.Entity("UniversityApplication.Models.Enrollment", b =>
                {
                    b.Property<long>("enrollmentId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<long>("enrollmentId"), 1L, 1);

                    b.Property<int?>("additionalPoints")
                        .HasColumnType("int");

                    b.Property<int>("courseId")
                        .HasColumnType("int");

                    b.Property<int?>("examPoints")
                        .HasColumnType("int");

                    b.Property<DateTime?>("finishDate")
                        .HasColumnType("datetime2");

                    b.Property<int?>("grade")
                        .HasColumnType("int");

                    b.Property<int?>("projectPoints")
                        .HasColumnType("int");

                    b.Property<string>("projectUrl")
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)");

                    b.Property<int?>("semester")
                        .HasColumnType("int");

                    b.Property<int?>("seminalPoints")
                        .HasColumnType("int");

                    b.Property<string>("seminalUrl")
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)");

                    b.Property<long>("studentId")
                        .HasColumnType("bigint");

                    b.Property<int?>("year")
                        .HasColumnType("int");

                    b.HasKey("enrollmentId");

                    b.HasIndex("courseId");

                    b.HasIndex("studentId");

                    b.ToTable("Enrollment");
                });

            modelBuilder.Entity("UniversityApplication.Models.Student", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<long>("Id"), 1L, 1);

                    b.Property<int?>("acquiredCredits")
                        .HasColumnType("int");

                    b.Property<int?>("currentSemester")
                        .HasColumnType("int");

                    b.Property<string>("educationLevel")
                        .HasMaxLength(25)
                        .HasColumnType("nvarchar(25)");

                    b.Property<DateTime?>("enrollmentDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("firstName")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("lastName")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("studentId")
                        .IsRequired()
                        .HasMaxLength(10)
                        .HasColumnType("nvarchar(10)");

                    b.HasKey("Id");

                    b.ToTable("Student");
                });

            modelBuilder.Entity("UniversityApplication.Models.Teacher", b =>
                {
                    b.Property<int>("teacherId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("teacherId"), 1L, 1);

                    b.Property<string>("academicRank")
                        .HasMaxLength(25)
                        .HasColumnType("nvarchar(25)");

                    b.Property<string>("degree")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("firstName")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<DateTime?>("hireDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("lastName")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("officeNumber")
                        .HasMaxLength(10)
                        .HasColumnType("nvarchar(10)");

                    b.HasKey("teacherId");

                    b.ToTable("Teacher");
                });

            modelBuilder.Entity("UniversityApplication.Models.Course", b =>
                {
                    b.HasOne("UniversityApplication.Models.Teacher", "firstTeacher")
                        .WithMany("Courses1")
                        .HasForeignKey("firstTeacherId");

                    b.HasOne("UniversityApplication.Models.Teacher", "secondTeacher")
                        .WithMany("Courses2")
                        .HasForeignKey("secondTeacherId");

                    b.Navigation("firstTeacher");

                    b.Navigation("secondTeacher");
                });

            modelBuilder.Entity("UniversityApplication.Models.Enrollment", b =>
                {
                    b.HasOne("UniversityApplication.Models.Course", "course")
                        .WithMany("Students")
                        .HasForeignKey("courseId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("UniversityApplication.Models.Student", "student")
                        .WithMany("Courses")
                        .HasForeignKey("studentId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("course");

                    b.Navigation("student");
                });

            modelBuilder.Entity("UniversityApplication.Models.Course", b =>
                {
                    b.Navigation("Students");
                });

            modelBuilder.Entity("UniversityApplication.Models.Student", b =>
                {
                    b.Navigation("Courses");
                });

            modelBuilder.Entity("UniversityApplication.Models.Teacher", b =>
                {
                    b.Navigation("Courses1");

                    b.Navigation("Courses2");
                });
#pragma warning restore 612, 618
        }
    }
}
